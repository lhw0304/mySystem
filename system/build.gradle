// buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等
buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'

    archivesBaseName = 'platform'
    group = 'com.mode'
    version = '3.0'

    // Global settings
    ext {
        // dependencies library verions
        mysqlVersion = '5.1.36'
        mybatisVersion = '3.3.0'
        mybatisSpringVersion = '1.2.3'
        druidVersion = '1.0.16'
        jjwtVersion = '0.6.0'
        jerseyVersion = '1.19'
        maxMind = '2.6.0'
        httpClient = '4.5.2'
        httpAsyncClient = '4.1.1'
        springVersion = '4.2.5.RELEASE'

        sharedManifest = manifest {
            attributes 'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Shanghai Yedao Technology',
                    'Built-By': 'Mode',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    // Settings for the compile task
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.7'
        targetCompatibility = '1.7'
        options.encoding = 'UTF-8'
        options.debug = true
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
    }

    // Config build-time properties token replacement for war projects
    configure([project(":user")]) {

        // Replace jdbc, log4j tokens with env specific settings
        processResources {
            def env = project.hasProperty('env') ? env : 'local'
            def configFile = file("${rootProject.projectDir}/config.groovy")
            def envProp = new ConfigSlurper("${env}").parse(configFile.toURL()).toProperties()

            from(sourceSets.main.resources.srcDirs) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: envProp)
            }
        }
    }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.9'
    }
}

project(':core') {

    // create a single Jar without dependencies
    jar {
        classifier = 'core'
        manifest = sharedManifest
    }

    // create a single Jar with all dependencies
    task fatJar(type: Jar) {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        classifier = 'core'
        manifest = sharedManifest
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.mybatis:mybatis:${mybatisVersion}")
        compile("org.mybatis:mybatis-spring:${mybatisSpringVersion}")
        compile("com.alibaba:druid:${druidVersion}")
        compile("io.jsonwebtoken:jjwt:${jjwtVersion}")
        compile("org.apache.httpcomponents:httpclient:${httpClient}")
        compile("org.apache.httpcomponents:httpasyncclient:${httpAsyncClient}")
        compile("org.springframework:spring-aspects:${springVersion}")

        runtime("org.springframework.boot:spring-boot-starter-tomcat")
        runtime("mysql:mysql-connector-java")

        compile('org.springframework.boot:spring-boot-starter-test')
    }
}

project(':user') {

    apply plugin: 'war'

    war {
        classifier = 'user'
        manifest = sharedManifest
    }

    dependencies {
        compile project(':core')

        testCompile project(':core')
    }
}